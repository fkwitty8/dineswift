# Generated by Django 5.2.7 on 2025-10-21 18:12

import django.contrib.postgres.indexes
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('cloud_api', '0002_create_complex_indexes'),
    ]

    operations = [
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('booking_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('party_size', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('checked_in', 'Checked In'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='pending', max_length=20)),
                ('deposit_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('deposit_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('refunded', 'Refunded'), ('forfeited', 'Forfeited')], default='pending', max_length=20)),
                ('special_requests', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_date', models.DateField(auto_now=True)),
            ],
            options={
                'db_table': 'bookings',
            },
        ),
        migrations.CreateModel(
            name='DeliveryBatch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('batch_status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('optimized_route', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('total_distance', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('estimated_completion_time', models.IntegerField(blank=True, null=True)),
                ('actual_completion_time', models.IntegerField(blank=True, null=True)),
                ('fuel_cost_estimate', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('batch_efficiency_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=4)),
            ],
            options={
                'db_table': 'delivery_batches',
            },
        ),
        migrations.CreateModel(
            name='KitchenDisplayOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('special_instructions', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('preparing', 'Preparing'), ('ready', 'Ready'), ('served', 'Served')], default='pending', max_length=20)),
                ('station_assigned', models.CharField(blank=True, max_length=100, null=True)),
                ('preparation_start_time', models.DateTimeField(blank=True, null=True)),
                ('preparation_end_time', models.DateTimeField(blank=True, null=True)),
                ('chef_notes', models.TextField(blank=True, null=True)),
                ('priority', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'kitchen_display_orders',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order_type', models.CharField(choices=[('sales', 'Sales'), ('supply', 'Supply')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('preparing', 'Preparing'), ('ready', 'Ready'), ('in_delivery', 'In Delivery'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled')], max_length=50)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'order',
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('source_entity_id', models.UUIDField()),
                ('source_entity_type', models.CharField(choices=[('menu_item', 'Menu Item'), ('inventory_item', 'Inventory Item')], max_length=20)),
                ('quantity', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('special_instructions', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'order_items',
            },
        ),
        migrations.CreateModel(
            name='SalesOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order_subtype', models.CharField(choices=[('dine_in', 'Dine In'), ('takeaway', 'Takeaway'), ('delivery', 'Delivery')], max_length=20)),
                ('estimated_preparation_time', models.IntegerField(blank=True, null=True)),
                ('actual_preparation_time', models.IntegerField(blank=True, null=True)),
                ('otp_code', models.CharField(blank=True, max_length=6, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'sales_orders',
            },
        ),
        migrations.AddField(
            model_name='localserver',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='menuitemingredient',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='role',
            name='deleted_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='role',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='userrole',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='booking',
            name='customer_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.user'),
        ),
        migrations.AddField(
            model_name='booking',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.restaurant'),
        ),
        migrations.AddField(
            model_name='booking',
            name='table',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.restauranttable'),
        ),
        migrations.AddField(
            model_name='deliverybatch',
            name='assigned_waiter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.user'),
        ),
        migrations.AddField(
            model_name='deliverybatch',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.restaurant'),
        ),
        migrations.AddField(
            model_name='kitchendisplayorder',
            name='menu_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.menuitem'),
        ),
        migrations.AddField(
            model_name='order',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.restaurant'),
        ),
        migrations.AddField(
            model_name='kitchendisplayorder',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.order'),
        ),
        migrations.AddField(
            model_name='orderitem',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.order'),
        ),
        migrations.AddField(
            model_name='salesorder',
            name='assigned_waiter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_orders', to='cloud_api.user'),
        ),
        migrations.AddField(
            model_name='salesorder',
            name='customer_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.user'),
        ),
        migrations.AddField(
            model_name='salesorder',
            name='order',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.order'),
        ),
        migrations.AddField(
            model_name='salesorder',
            name='table',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cloud_api.restauranttable'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['restaurant'], name='idx_bookings_restaurant'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['customer_user'], name='idx_bookings_customer'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['table'], name='idx_bookings_table'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['booking_date'], name='idx_bookings_date'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['status'], name='idx_bookings_status'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['restaurant', 'booking_date'], name='idx_bookings_restaurant_date'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['customer_user', 'booking_date'], name='idx_bookings_customer_date'),
        ),
        migrations.AddIndex(
            model_name='deliverybatch',
            index=models.Index(fields=['restaurant'], name='idx_dv_restaurant'),
        ),
        migrations.AddIndex(
            model_name='deliverybatch',
            index=models.Index(fields=['batch_status'], name='idx_dv_status'),
        ),
        migrations.AddIndex(
            model_name='deliverybatch',
            index=models.Index(fields=['assigned_waiter'], name='idx_dv_waiter'),
        ),
        migrations.AddIndex(
            model_name='deliverybatch',
            index=models.Index(fields=['created_at'], name='idx_dv_created_at'),
        ),
        migrations.AddIndex(
            model_name='deliverybatch',
            index=models.Index(fields=['batch_efficiency_score'], name='idx_dv_efficiency'),
        ),
        migrations.AddIndex(
            model_name='deliverybatch',
            index=models.Index(fields=['total_distance'], name='idx_dv_distance'),
        ),
        migrations.AddIndex(
            model_name='deliverybatch',
            index=models.Index(fields=['estimated_completion_time', 'actual_completion_time'], name='idx_dv_completion'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['restaurant', 'created_at'], name='idx_orders_restaurant_created'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['status', 'created_at'], name='idx_orders_status_created'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['created_at'], name='idx_orders_created_at'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(condition=models.Q(('status__in', ['cancelled', 'delivered']), _negated=True), fields=['restaurant', 'created_at'], name='idx_orders_active'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(condition=models.Q(('status__in', ['confirmed', 'preparing'])), fields=['restaurant', 'status', 'created_at'], name='idx_orders_kitchen_status'),
        ),
        migrations.AddIndex(
            model_name='kitchendisplayorder',
            index=models.Index(fields=['status'], name='idx_ko_status'),
        ),
        migrations.AddIndex(
            model_name='kitchendisplayorder',
            index=models.Index(fields=['station_assigned'], name='idx_ko_station'),
        ),
        migrations.AddIndex(
            model_name='kitchendisplayorder',
            index=models.Index(fields=['priority', 'created_at'], name='idx_ko_priority'),
        ),
        migrations.AddIndex(
            model_name='kitchendisplayorder',
            index=models.Index(fields=['preparation_start_time', 'preparation_end_time'], name='idx_ko_preparation'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['order'], name='idx_order_items_order'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['source_entity_id', 'source_entity_type'], name='idx_order_items_source_entity'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['source_entity_type', 'source_entity_id'], name='idx_order_items_source_type'),
        ),
        migrations.AddIndex(
            model_name='salesorder',
            index=models.Index(fields=['customer_user'], name='idx_sales_orders_customer'),
        ),
        migrations.AddIndex(
            model_name='salesorder',
            index=models.Index(fields=['order_subtype'], name='idx_sales_orders_subtype'),
        ),
        migrations.AddIndex(
            model_name='salesorder',
            index=models.Index(fields=['table'], name='idx_sales_orders_table'),
        ),
        migrations.AddIndex(
            model_name='salesorder',
            index=models.Index(fields=['assigned_waiter'], name='idx_sales_orders_waiter'),
        ),
        migrations.AddIndex(
            model_name='salesorder',
            index=models.Index(fields=['customer_user', 'created_at'], name='idx_sales_orders_customer_date'),
        ),
    ]
