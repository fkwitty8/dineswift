# Generated by Django 5.2.7 on 2025-10-21 06:31

import cloud_api.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('item_name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('unit_of_measure', models.CharField(max_length=50)),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('current_stock', models.DecimalField(decimal_places=3, default=0, max_digits=10)),
                ('min_stock_threshold', models.DecimalField(decimal_places=3, default=0, max_digits=10)),
                ('max_stock_capacity', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('stock_status', models.CharField(choices=[('in_stock', 'In Stock'), ('low_stock', 'Low Stock'), ('out_of_stock', 'Out of Stock')], default='in_stock', max_length=20)),
                ('last_restocked', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'inventory_items',
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('version', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'menus',
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('item_name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('sales_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('preparation_time', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('is_available', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('menu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.menu')),
            ],
            options={
                'db_table': 'menu_items',
            },
        ),
        migrations.CreateModel(
            name='MenuItemIngredient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity_required', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('unit', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('inventory_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.inventoryitem')),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.menuitem')),
            ],
            options={
                'db_table': 'menu_item_ingredients',
            },
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('cuisine_type', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.JSONField()),
                ('contact_info', models.JSONField()),
                ('operation_hours', models.JSONField()),
                ('social_media_links', models.JSONField(blank=True, null=True)),
                ('delivery_options', models.JSONField(blank=True, null=True)),
                ('payment_methods_accepted', models.JSONField(blank=True, null=True)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_reviews', models.IntegerField(default=0)),
                ('average_delivery_time', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'restaurants',
                'indexes': [models.Index(fields=['status'], name='idx_restaurants_status'), models.Index(fields=['cuisine_type'], name='idx_restaurants_cuisine'), models.Index(fields=['average_rating'], name='idx_restaurants_rating'), models.Index(fields=['created_at'], name='idx_restaurants_created_at')],
            },
        ),
        migrations.AddField(
            model_name='menu',
            name='restaurant',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.restaurant'),
        ),
        migrations.CreateModel(
            name='LocalServer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('server_name', models.CharField(blank=True, max_length=255, null=True)),
                ('server_url', models.CharField(blank=True, max_length=500, null=True)),
                ('status', models.CharField(choices=[('online', 'Online'), ('offline', 'Offline'), ('maintenance', 'Maintenance')], default='online', max_length=20)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('restaurant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.restaurant')),
            ],
            options={
                'db_table': 'local_servers',
            },
        ),
        migrations.AddField(
            model_name='inventoryitem',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.restaurant'),
        ),
        migrations.CreateModel(
            name='RestaurantTable',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('table_number', models.CharField(max_length=20)),
                ('qr_code', models.CharField(max_length=500, unique=True)),
                ('capacity', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('table_status', models.CharField(choices=[('available', 'Available'), ('occupied', 'Occupied'), ('reserved', 'Reserved'), ('maintenance', 'Maintenance')], default='available', max_length=20)),
                ('coordinates', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.restaurant')),
            ],
            options={
                'db_table': 'restaurant_tables',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role_name', models.CharField(max_length=50, unique=True)),
                ('permissions', models.JSONField()),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'roles',
                'indexes': [models.Index(fields=['role_name'], name='idx_roles_name')],
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('company_name', models.CharField(max_length=255)),
                ('contact_person', models.CharField(blank=True, max_length=255, null=True)),
                ('contact_info', models.JSONField()),
                ('address', models.JSONField(blank=True, null=True)),
                ('business_registration', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_terms', models.JSONField(blank=True, null=True)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'suppliers',
                'indexes': [models.Index(fields=['is_active'], name='idx_suppliers_active'), models.Index(fields=['rating'], name='idx_suppliers_rating')],
            },
        ),
        migrations.CreateModel(
            name='RestaurantSupplier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('relationship_status', models.CharField(choices=[('active', 'Active'), ('suspended', 'Suspended'), ('inactive', 'Inactive')], default='active', max_length=20)),
                ('is_preferred', models.BooleanField(default=False)),
                ('payment_terms', models.JSONField(blank=True, null=True)),
                ('delivery_lead_time', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.restaurant')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.supplier')),
            ],
            options={
                'db_table': 'restaurant_suppliers',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone_number', models.CharField(blank=True, max_length=50, null=True)),
                ('gps_location', models.JSONField(blank=True, null=True)),
                ('communication_preferences', models.JSONField(default=cloud_api.models.get_default_communication_preferences)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='api_user_groups', related_query_name='api_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='api_user_permissions', related_query_name='api_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('restaurant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cloud_api.restaurant')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cloud_api.user')),
            ],
            options={
                'db_table': 'user_roles',
            },
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['menu'], name='idx_menu_items_menu'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_available'], name='idx_menu_items_available'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['sales_price'], name='idx_menu_items_price'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['preparation_time'], name='idx_menu_items_prep_time'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['department'], name='idx_menu_items_department'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['menu', 'is_available', 'display_order'], name='idx_menu_item_avilable'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(condition=models.Q(('is_available', True)), fields=['menu', 'sales_price'], name='idx_menu_items_active_price'),
        ),
        migrations.AddIndex(
            model_name='menuitemingredient',
            index=models.Index(fields=['menu_item'], name='idx_ingredients_menu_item'),
        ),
        migrations.AddIndex(
            model_name='menuitemingredient',
            index=models.Index(fields=['inventory_item'], name='idx_ingredients_inventory_item'),
        ),
        migrations.AddConstraint(
            model_name='menuitemingredient',
            constraint=models.UniqueConstraint(fields=('menu_item', 'inventory_item'), name='unique_menu_item_ingredient'),
        ),
        migrations.AddIndex(
            model_name='menu',
            index=models.Index(condition=models.Q(('is_active', True)), fields=['restaurant'], name='idx_menus_restaurant_active'),
        ),
        migrations.AddIndex(
            model_name='menu',
            index=models.Index(fields=['is_active'], name='idx_menus_active'),
        ),
        migrations.AddIndex(
            model_name='localserver',
            index=models.Index(fields=['status'], name='idx_local_servers_status'),
        ),
        migrations.AddIndex(
            model_name='localserver',
            index=models.Index(fields=['last_sync'], name='idx_local_servers_last_sync'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['restaurant'], name='idx_inventory_restaurant'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['stock_status'], name='idx_inventory_status'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(condition=models.Q(('stock_status__in', ['low_stock', 'out_of_stock'])), fields=['restaurant', 'stock_status'], name='idx_inventory_low_stock'),
        ),
        migrations.AddIndex(
            model_name='restauranttable',
            index=models.Index(fields=['restaurant'], name='idx_tables_restaurant'),
        ),
        migrations.AddIndex(
            model_name='restauranttable',
            index=models.Index(fields=['table_status'], name='idx_tables_status'),
        ),
        migrations.AddIndex(
            model_name='restauranttable',
            index=models.Index(fields=['capacity'], name='idx_tables_capacity'),
        ),
        migrations.AddIndex(
            model_name='restauranttable',
            index=models.Index(fields=['restaurant', 'table_status'], name='idx_tables_restaurant_status'),
        ),
        migrations.AddIndex(
            model_name='restauranttable',
            index=models.Index(fields=['qr_code'], name='idx_tables_qr_code'),
        ),
        migrations.AddIndex(
            model_name='restaurantsupplier',
            index=models.Index(fields=['restaurant'], name='idx_rs_restaurant'),
        ),
        migrations.AddIndex(
            model_name='restaurantsupplier',
            index=models.Index(fields=['supplier'], name='idx_rs_supplier'),
        ),
        migrations.AddIndex(
            model_name='restaurantsupplier',
            index=models.Index(fields=['relationship_status'], name='idx_rs_status'),
        ),
        migrations.AddIndex(
            model_name='restaurantsupplier',
            index=models.Index(condition=models.Q(('is_preferred', True)), fields=['restaurant', 'is_preferred'], name='idx_rs_preferred'),
        ),
        migrations.AddConstraint(
            model_name='restaurantsupplier',
            constraint=models.UniqueConstraint(fields=('restaurant', 'supplier'), name='unique_restaurant_supplier'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='idx_users_email'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(condition=models.Q(('is_active', True)), fields=['is_active'], name='idx_users_active'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['last_login'], name='idx_users_last_login'),
        ),
        migrations.AddIndex(
            model_name='userrole',
            index=models.Index(fields=['user'], name='idx_user_roles_user'),
        ),
        migrations.AddIndex(
            model_name='userrole',
            index=models.Index(fields=['restaurant'], name='idx_user_roles_restaurant'),
        ),
        migrations.AddIndex(
            model_name='userrole',
            index=models.Index(condition=models.Q(('is_active', True)), fields=['user', 'role', 'restaurant'], name='idx_user_roles_active'),
        ),
        migrations.AddConstraint(
            model_name='userrole',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True)), fields=('user', 'role', 'restaurant'), name='idx_user_role_unique'),
        ),
    ]
